apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ccf-app.fullname" . }}-api
  labels:
    {{- include "ccf-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ccf-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ccf-app.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ccf-app.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "ccf-app.fullname" . }}-api
          env:
            - name: CCF_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.database.local.enabled }}{{ include "ccf-app.fullname" . }}-psql{{ else }}{{ .Values.database.external.existingSecret }}{{ end }}
                  key: {{ if .Values.database.local.enabled }}POSTGRES_PASSWORD{{ else }}{{ .Values.database.external.passwordKey }}{{ end }}
            - name: CCF_DB_CONNECTION
              value: "host=$(CCF_DB_HOST) port=$(CCF_DB_PORT) dbname=$(CCF_DB_NAME) user=$(CCF_DB_USER) password=$(CCF_DB_PASSWORD) sslmode=disable"
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /var/ccf/private_key/
              name: privatekey
              readOnly: true
            - mountPath: /var/ccf/public_key/
              name: publickey
              readOnly: true
      initContainers:
        - name: wait-for-postgres
          image: "{{ .Values.database.local.image.repository }}:{{ .Values.database.local.image.tag | default 17.5 }}"
          imagePullPolicy: {{ .Values.database.local.image.pullPolicy }}
          command: ['sh', '-c', 'until pg_isready -h ${CCF_DB_HOST} -p ${CCF_DB_PORT} -U ${CCF_DB_USER}; do echo waiting for database; sleep 2; done;']
          envFrom:
            - configMapRef:
                name: {{ include "ccf-app.fullname" . }}-api
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.database.local.enabled }}{{ include "ccf-app.fullname" . }}-psql{{ else }}{{ .Values.database.external.existingSecret }}{{ end }}
                  key: {{ if .Values.database.local.enabled }}POSTGRES_PASSWORD{{ else }}{{ .Values.database.external.passwordKey }}{{ end }}
          volumeMounts:
            - mountPath: /var/ccf/private_key/
              name: privatekey
              readOnly: true
            - mountPath: /var/ccf/public_key/
              name: publickey
              readOnly: false
        - name: generate-public-key
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          command: ['sh', '-c', 'echo "Generating public key from private key..." && openssl rsa -in /var/ccf/private_key/private_key.pem -pubout -out /var/ccf/public_key/public_key.pem']
          volumeMounts:
            - mountPath: /var/ccf/private_key/
              name: privatekey
              readOnly: true
            - mountPath: /var/ccf/public_key/
              name: publickey
              readOnly: false
        - name: migrate-db
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          command: ['sh', '-c', 'echo "Running DB migrations..." && ./api migrate up']
          envFrom:
            - configMapRef:
                name: {{ include "ccf-app.fullname" . }}-api
          env:
            - name: CCF_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.database.local.enabled }}{{ include "ccf-app.fullname" . }}-psql{{ else }}{{ .Values.database.external.existingSecret }}{{ end }}
                  key: {{ if .Values.database.local.enabled }}POSTGRES_PASSWORD{{ else }}{{ .Values.database.external.passwordKey }}{{ end }}
            - name: CCF_DB_CONNECTION
              value: "host=$(CCF_DB_HOST) port=$(CCF_DB_PORT) dbname=$(CCF_DB_NAME) user=$(CCF_DB_USER) password=$(CCF_DB_PASSWORD) sslmode=disable"
          volumeMounts:
            - mountPath: /var/ccf/private_key/
              name: privatekey
              readOnly: true
            - mountPath: /var/ccf/public_key/
              name: publickey
              readOnly: false
        - name: create-user
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          command: ['sh', '-c', 'echo "Creating default user..." && ./api users add -f admin -l user -e {{ .Values.api.user.email | default "admin@localhost" }} -p $(CCF_INITIAL_USER_PASSWORD)']
          envFrom:
            - configMapRef:
                name: {{ include "ccf-app.fullname" . }}-api
          env:
            - name: CCF_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.database.local.enabled }}{{ include "ccf-app.fullname" . }}-psql{{ else }}{{ .Values.database.external.existingSecret }}{{ end }}
                  key: {{ if .Values.database.local.enabled }}POSTGRES_PASSWORD{{ else }}{{ .Values.database.external.passwordKey }}{{ end }}
            - name: CCF_INITIAL_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ccf-app.fullname" . }}-initial-user-password
                  key: password
            - name: CCF_DB_CONNECTION
              value: "host=$(CCF_DB_HOST) port=$(CCF_DB_PORT) dbname=$(CCF_DB_NAME) user=$(CCF_DB_USER) password=$(CCF_DB_PASSWORD) sslmode=disable"
          volumeMounts:
            - mountPath: /var/ccf/private_key/
              name: privatekey
              readOnly: true
            - mountPath: /var/ccf/public_key/
              name: publickey
              readOnly: false
      volumes:
        - name: privatekey
          secret:
            secretName: {{ include "ccf-app.fullname" . }}-jwt-private-key
        - name: publickey
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
